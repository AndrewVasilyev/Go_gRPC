// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: plants.proto

package plants_service_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlantResolverClient is the client API for PlantResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantResolverClient interface {
	AddPlantProc(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*AddPlantResponse, error)
	GetPlantsProc(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error)
	GetPlantByIdProc(ctx context.Context, in *GetPlantByIdRequest, opts ...grpc.CallOption) (*GetPlantByIdResponse, error)
	UpdatePlantByIdProc(ctx context.Context, in *UpdatePlantByIdRequest, opts ...grpc.CallOption) (*UpdatePlantByIdResponse, error)
	DeletePlantByIdProc(ctx context.Context, in *DeletePlantByIdRequest, opts ...grpc.CallOption) (*DeletePlantByIdResponse, error)
}

type plantResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantResolverClient(cc grpc.ClientConnInterface) PlantResolverClient {
	return &plantResolverClient{cc}
}

func (c *plantResolverClient) AddPlantProc(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*AddPlantResponse, error) {
	out := new(AddPlantResponse)
	err := c.cc.Invoke(ctx, "/PlantResolver/AddPlantProc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantResolverClient) GetPlantsProc(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error) {
	out := new(GetPlantsResponse)
	err := c.cc.Invoke(ctx, "/PlantResolver/GetPlantsProc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantResolverClient) GetPlantByIdProc(ctx context.Context, in *GetPlantByIdRequest, opts ...grpc.CallOption) (*GetPlantByIdResponse, error) {
	out := new(GetPlantByIdResponse)
	err := c.cc.Invoke(ctx, "/PlantResolver/GetPlantByIdProc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantResolverClient) UpdatePlantByIdProc(ctx context.Context, in *UpdatePlantByIdRequest, opts ...grpc.CallOption) (*UpdatePlantByIdResponse, error) {
	out := new(UpdatePlantByIdResponse)
	err := c.cc.Invoke(ctx, "/PlantResolver/UpdatePlantByIdProc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantResolverClient) DeletePlantByIdProc(ctx context.Context, in *DeletePlantByIdRequest, opts ...grpc.CallOption) (*DeletePlantByIdResponse, error) {
	out := new(DeletePlantByIdResponse)
	err := c.cc.Invoke(ctx, "/PlantResolver/DeletePlantByIdProc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantResolverServer is the server API for PlantResolver service.
// All implementations must embed UnimplementedPlantResolverServer
// for forward compatibility
type PlantResolverServer interface {
	AddPlantProc(context.Context, *AddPlantRequest) (*AddPlantResponse, error)
	GetPlantsProc(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error)
	GetPlantByIdProc(context.Context, *GetPlantByIdRequest) (*GetPlantByIdResponse, error)
	UpdatePlantByIdProc(context.Context, *UpdatePlantByIdRequest) (*UpdatePlantByIdResponse, error)
	DeletePlantByIdProc(context.Context, *DeletePlantByIdRequest) (*DeletePlantByIdResponse, error)
	mustEmbedUnimplementedPlantResolverServer()
}

// UnimplementedPlantResolverServer must be embedded to have forward compatible implementations.
type UnimplementedPlantResolverServer struct {
}

func (UnimplementedPlantResolverServer) AddPlantProc(context.Context, *AddPlantRequest) (*AddPlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlantProc not implemented")
}
func (UnimplementedPlantResolverServer) GetPlantsProc(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantsProc not implemented")
}
func (UnimplementedPlantResolverServer) GetPlantByIdProc(context.Context, *GetPlantByIdRequest) (*GetPlantByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantByIdProc not implemented")
}
func (UnimplementedPlantResolverServer) UpdatePlantByIdProc(context.Context, *UpdatePlantByIdRequest) (*UpdatePlantByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlantByIdProc not implemented")
}
func (UnimplementedPlantResolverServer) DeletePlantByIdProc(context.Context, *DeletePlantByIdRequest) (*DeletePlantByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlantByIdProc not implemented")
}
func (UnimplementedPlantResolverServer) mustEmbedUnimplementedPlantResolverServer() {}

// UnsafePlantResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantResolverServer will
// result in compilation errors.
type UnsafePlantResolverServer interface {
	mustEmbedUnimplementedPlantResolverServer()
}

func RegisterPlantResolverServer(s grpc.ServiceRegistrar, srv PlantResolverServer) {
	s.RegisterService(&PlantResolver_ServiceDesc, srv)
}

func _PlantResolver_AddPlantProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantResolverServer).AddPlantProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlantResolver/AddPlantProc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantResolverServer).AddPlantProc(ctx, req.(*AddPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantResolver_GetPlantsProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantResolverServer).GetPlantsProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlantResolver/GetPlantsProc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantResolverServer).GetPlantsProc(ctx, req.(*GetPlantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantResolver_GetPlantByIdProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantResolverServer).GetPlantByIdProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlantResolver/GetPlantByIdProc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantResolverServer).GetPlantByIdProc(ctx, req.(*GetPlantByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantResolver_UpdatePlantByIdProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlantByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantResolverServer).UpdatePlantByIdProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlantResolver/UpdatePlantByIdProc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantResolverServer).UpdatePlantByIdProc(ctx, req.(*UpdatePlantByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantResolver_DeletePlantByIdProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlantByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantResolverServer).DeletePlantByIdProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlantResolver/DeletePlantByIdProc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantResolverServer).DeletePlantByIdProc(ctx, req.(*DeletePlantByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantResolver_ServiceDesc is the grpc.ServiceDesc for PlantResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlantResolver",
	HandlerType: (*PlantResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlantProc",
			Handler:    _PlantResolver_AddPlantProc_Handler,
		},
		{
			MethodName: "GetPlantsProc",
			Handler:    _PlantResolver_GetPlantsProc_Handler,
		},
		{
			MethodName: "GetPlantByIdProc",
			Handler:    _PlantResolver_GetPlantByIdProc_Handler,
		},
		{
			MethodName: "UpdatePlantByIdProc",
			Handler:    _PlantResolver_UpdatePlantByIdProc_Handler,
		},
		{
			MethodName: "DeletePlantByIdProc",
			Handler:    _PlantResolver_DeletePlantByIdProc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plants.proto",
}
